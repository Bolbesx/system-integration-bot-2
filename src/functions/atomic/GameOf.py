"""Module for Game of Thrones Quotes Bot Function."""

import logging
import requests
from typing import List
import telebot
from telebot import types
from bot_func_abc import AtomicBotFunctionABC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
)
logger = logging.getLogger(__name__)

class GameOfThronesQuotesBotFunction(AtomicBotFunctionABC):
    """Function to get Game of Thrones quotes from API by command"""

    commands: List[str] = ["got", "gots"]
    authors: List[str] = ["bolse119"]
    about: str = "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤!"
    description: str = (
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/gots - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "/got <–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞> - –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É\n"
        "–ü—Ä–∏–º–µ—Ä: /got tyrion\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: Tyrion, Jon, Daenerys, Jaime, Sansa, Petyr, "
        "Cersei, Arya, Eddard, Theon, Samwell, Varys\n"
        "API: https://api.gameofthronesquotes.xyz"
    )
    state: bool = True

    bot: telebot.TeleBot
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Ö slug
    characters: List[dict] = [
        {"name": "Tyrion Lannister", "slug": "tyrion"},
        {"name": "Jon Snow", "slug": "jon"},
        {"name": "Daenerys Targaryen", "slug": "daenerys"},
        {"name": "Jaime Lannister", "slug": "jaime"},
        {"name": "Sansa Stark", "slug": "sansa"},
        {"name": "Petyr Baelish", "slug": "petyr"},
        {"name": "Cersei Lannister", "slug": "cersei"},
        {"name": "Arya Stark", "slug": "arya"},
        {"name": "Eddard Stark", "slug": "eddard"},
        {"name": "Theon Greyjoy", "slug": "theon"},
        {"name": "Samwell Tarly", "slug": "samwell"},
        {"name": "Varys", "slug": "varys"}
    ]

    def set_handlers(self, bot: telebot.TeleBot):
        """Set message handlers"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ %s", self.commands)
        self.bot = bot

        @bot.message_handler(commands=self.commands)
        def got_message_handler(message: types.Message):
            logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ —á–∞—Ç–µ %s",
                       message.text, message.from_user.id, message.chat.id)

            command = message.text.split()[0].lower()

            if command == "/gots":
                logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                characters_list = ", ".join(char["name"] for char in self.characters)
                bot.reply_to(
                    message,
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {characters_list}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /got <–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞>"
                )
                logger.info("–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç %s", message.chat.id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ /got
            command_args = message.text.split(maxsplit=1)
            if len(command_args) < 2:
                logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã %s", message.text)
                bot.reply_to(
                    message,
                    "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü—Ä–∏–º–µ—Ä: /got tyrion\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(char['name'] for char in self.characters)}"
                )
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç %s", message.chat.id)
                return

            character_input = command_args[1].lower().strip()
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: %s", character_input)

            # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–ø–∏—Å–∫–µ
            character = next(
                (char for char in self.characters
                 if char["name"].lower().startswith(character_input) or
                    char["slug"].lower() == character_input),
                None
            )

            if not character:
                logger.warning("–ü–µ—Ä—Å–æ–Ω–∞–∂ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", character_input)
                bot.reply_to(
                    message,
                    f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(char['name'] for char in self.characters)}"
                )
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç %s", message.chat.id)
                return

            logger.info("–ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: %s (slug: %s)", character["name"], character["slug"])

            # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—É
            quote = self.__get_got_quote(character["slug"])

            if quote:
                logger.info("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è %s: %s",
                           character["slug"], quote["sentence"])
                bot.reply_to(
                    message,
                    f"üìú {quote['sentence']}\n‚Äî {quote['character']['name']}"
                )
                logger.info("–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç %s", message.chat.id)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ %s", character["slug"])
                bot.reply_to(
                    message,
                    f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–ª—è {character['name']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç %s", message.chat.id)

    def __get_got_quote(self, slug: str) -> dict:
        """Get random quote for specific character"""
        logger.info("–ó–∞–ø—Ä–æ—Å —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å slug: %s", slug)
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ 2 —Ü–∏—Ç–∞—Ç
            response = requests.get(
                f"https://api.gameofthronesquotes.xyz/v1/author/{slug}/2",
                timeout=5
            )
            logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è %s, —Å—Ç–∞—Ç—É—Å: %d", slug, response.status_code)
            logger.debug("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: %s", response.text)
            response.raise_for_status()

            data = response.json()
            if isinstance(data, list) and len(data) > 0:
                quote = data[0]
                if "sentence" in quote and "character" in quote:
                    logger.info("–¶–∏—Ç–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è %s: %s", slug, quote["sentence"])
                    return quote
                logger.warning("–¶–∏—Ç–∞—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π: %s", quote)
                return None
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ %s: %s", slug, data)
            return None
        except requests.RequestException as ex:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è %s: %s", slug, ex)
            return None
        except ValueError as json_err:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è %s: %s", slug, json_err)
            return None
